{% extends 'layout.html.j2' %}

{% block body %}

<div style="text-align: justify">

  <p><center> <h2>Data Selection by Country </h2></center></p>
</div><!-- .entry-content -->
<div><!-- class="homerow">-->
  <div class="homecol col-md-6 col-sm-12">
    <p><center> Use the interactive map below to select your country of interest </center></p>
    <!--<div id="map" style="height: 550px; width:640px; grid-area: a"></div>-->
    <div id="map" style="height: 550px; width:100%; grid-area: a"></div>
  </div>
  <!--<div id="countrygrid">
    <div class="homerow" style="justify-content: space-around;">-->

      <div id="quadrantcontainer" class="grdcontainercol col-md-6 col-sm-12" style="visibility: hidden; padding-top: 50px">
        <div class="quadcontainer">
          <div id="uplabel" class="uaxislbl">High</div>
          <div id="quad00" class="box grow" style="top:12%; left:12%;">Quadrant 00</div>
          <div id="yaxis" class="vertline">Placeholder</div>
          <div id="quad01" class="box grow" style="top:12%; right:12%;">Quadrant 01</div>
          <div id="xaxis" class="horline" style="height:10%; top: 45%; position: absolute;">
            <div id="leftlabel" class="laxislbl">&nbsp &nbsp &nbsp Low</div>
            <div class=leftline>Climate</div>
            <div class=rightline>Impact</div>
            <div id="rightlabel" class="raxislbl">High &nbsp &nbsp &nbsp</div>
          </div>
          <div id="quad10" class="box grow" style="bottom:12%; left:12%;">Quadrant 10</div>
          <div id="quad11" class="box grow" style="bottom:12%; right:12%;">Quadrant 11</div>
          <img src="/static/images/arrows2.png">
          <div id="downlabel" class="daxislbl">Low</div>
        </div>
        <a href="/data_exploration/AAAcomp"><div class="box grow" style="padding: 1.25em 2.25em; width: 100%; position:relative; height:20%; margin-top: 20px">Interquadrant Comparisons</div></a>
      </div>
      <div id="accomptext" class="grdcol col-md-12" style="margin: 30px; text-align: justify; visibility: hidden"></div>
    <!--</div>
  </div>-->
</div>
<script src="{{ url_for ('static', filename='geojson/countries.js')}}", type="text/javascript"></script>
<script type="text/javascript">
// The first parameter are the coordinates of the center of the map
// The second parameter is the zoom level
  var map = L.map('map', {
    minZoom: 0,
    zoomSnap: 0.25,
  }).setView([-18.5, 30.0], 4.25);

  // {z}, {x} and {y} are placeholders for map tiles
  // {x} and {y} are the x/y of where you are on the map
  // {z} is the zoom level

	L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoiY2VtYWMtY2NzIiwiYSI6ImNrNTVraHB1YjBzamUza29maHpuaXhxMDUifQ.TeGCFnu6MhaZXNw80EWWdw', {
		maxZoom: 18,
		attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
			'<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
			'Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
		id: 'mapbox/light-v9'
	}).addTo(map);

  // control that shows country name on hover
  var info = L.control();

  info.onAdd = function (map) {
  	this._div = L.DomUtil.create('div', 'info');
  	this.update();
  	return this._div;
  };

  info.update = function (props) {
  	this._div.innerHTML = '<h4>AFRICAP Country:</h4>' +  (props ?
  		'<b>' + props.name : 'Hover over a country');
  };

  info.addTo(map);

  function showDiv(ccode) {
    document.getElementById('accomptext').style.visibility = "visible";
    document.getElementById('quadrantcontainer').style.visibility = "visible";
    const regex = /\/data_exploration\/.../gi;
    var links = document.getElementsByClassName('box')
    for (var j = 0; j < links.length; j++) {
      links[j].innerHTML = links[j].innerHTML.replace(regex, '\/data_exploration\/' + ccode);
    }
    var links = document.getElementsByClassName('homebox')
    for (var j = 0; j < links.length; j++) {
      links[j].innerHTML = links[j].innerHTML.replace(regex, '\/data_exploration\/' + ccode);
    }
    if (ccode == "MWI") {
      document.getElementById("yaxis").innerHTML = "Policy Implementation";
      document.getElementById("accomptext").innerHTML = "<p>Quadrants for Malawi explore the effect of policy implementation and climate impact on various agricultural metrics. Click on one of the quadrants to examine the data in more detail, or compare quadrants using the 'Interquadrant Comparisons' button.</p>";
      document.getElementById("quad00").innerHTML = "The Path to Heaven";
      document.getElementById("quad01").innerHTML = "Demanding but Coping";
      document.getElementById("quad10").innerHTML = "Degrading Economy";
      document.getElementById("quad11").innerHTML = "The Road to Hell";
      document.getElementById("downlabel").innerHTML = "Poor";
      document.getElementById("uplabel").innerHTML = "Good";
    } else if (ccode == "ZMB") {
      document.getElementById("yaxis").innerHTML = "Market Connectivity";
      document.getElementById("accomptext").innerHTML = "<p>Quadrants for Zambia explore the effect of market connectivity and function in high and low climate impact scenarios on various agricultural metrics. Click on one of the quadrants to examine the data in more detail, or compare quadrants using the 'Interquadrant Comparisons' button.</p>";
      document.getElementById("quad00").innerHTML = "Opportunity and Exposure";
      document.getElementById("quad01").innerHTML = "Risk and Reward";
      document.getElementById("quad10").innerHTML = "Solitude and Self-Sufficiency";
      document.getElementById("quad11").innerHTML = "Isolation and Imperative";
    } else if (ccode == "TZA") {
      document.getElementById("yaxis").innerHTML = "Tech. Development";
      document.getElementById("accomptext").innerHTML = "<p>Quadrants for the United Republic of Tanzania explore the effect of changes in technological development and climate impact on various agricultural metrics. Click on one of the quadrants to examine the data in more detail, or compare quadrants using the 'Interquadrant Comparisons' button.</p>";
      document.getElementById("quad00").innerHTML = "Technofix";
      document.getElementById("quad01").innerHTML = "Intensive Vulnerability";
      document.getElementById("quad10").innerHTML = "Human Capital";
      document.getElementById("quad11").innerHTML = "Climate Chaos";
      document.getElementById("downlabel").innerHTML = "Stagnation";
      document.getElementById("uplabel").innerHTML = "Transformation";
    } else {
      document.getElementById("yaxis").innerHTML = "Land Reform";
      document.getElementById("accomptext").innerHTML = "<p>Quadrants for South Africa explore the effects of the degree of land reform in scenarios of high and low climate impact on various agricultural metrics. Click on one of the quadrants to examine the data in more detail, or compare quadrants using the 'Interquadrant Comparisons' button.</p>";
      document.getElementById("quad00").innerHTML = "Structural Change";
      document.getElementById("quad01").innerHTML = "All Change";
      document.getElementById("quad10").innerHTML = "Familiar Futures";
      document.getElementById("quad11").innerHTML = "Hot and Bothered";
      document.getElementById("downlabel").innerHTML = "Little";
      document.getElementById("uplabel").innerHTML = "Significant";
    }
  }

  // get color depending on population density value
  function getColor(c) {
  	return c == "ZAF" ? '#800026' :
  			c == "ZMB"  ? '#BD0026' :
  			c == "TZA"  ? '#E31A1C' :
  			c == "MWI"  ? '#FC4E2A' :
  						'#FFEDA0';
  }

  function style(feature) {
  	return {
  		weight: 2,
  		opacity: 1,
  		color: 'white',
  		dashArray: '3',
  		fillOpacity: 0.7,
  		fillColor: getColor(feature.properties.code)
  	};
  }

  function highlightFeature(e) {
  	var layer = e.target;

		layer.setStyle({
			weight: 5,
			color: '#666',
			dashArray: '',
			fillOpacity: 0.7
		});

		if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
			layer.bringToFront();
		}

		info.update(layer.feature.properties);

	}

	var geojson;

	function resetHighlight(e) {
		geojson.resetStyle(e.target);
		info.update();
	}

	function zoomToFeature(e) {
		map.fitBounds(e.target.getBounds());
	}

	function onEachFeature(feature, layer) {
		layer.on({
			mouseover: highlightFeature,
			mouseout: resetHighlight,
			click: combFunc
		});
    /*layer.bindPopup('Select one of the quadrants to examine data for '+feature.properties.name+', or compare data between quadrants.')*/
	}

  function combFunc(e) {
    var layer = e.target;
    zoomToFeature(e);
    showDiv(layer.feature.properties.code);
  }

	geojson = L.geoJson(countries, {
		style: style,
		onEachFeature: onEachFeature
	}).addTo(map);

</script>
{% endblock %}
